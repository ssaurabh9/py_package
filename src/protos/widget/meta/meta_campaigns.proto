syntax = "proto3";

package strique.model.widget.meta;

import "types/currency/currency.proto";
import "constants/ui/render_type.proto";
import "constants/ui/sorting_direction.proto";

option java_package = "com.strique.model.widget.meta";
option java_outer_classname = "MetaCampaignsProto";

// Next Id: 5
// Proto definition for Meta Campaigns Data.
message MetaCampaignsData {
    // Title for this widget.
    string widget_title = 1;

    // List of records for this widget.
    repeated MetaCampaignsRecord records = 2;

    // Total record.
    optional MetaCampaignsRecord total = 3;

    // Summary data for a subset of records.
    optional MetaCampaignsRecord subtotal = 4;
}

// Next Id: 35
// Proto definition for a single record of Meta Campaigns.
message MetaCampaignsRecord {
  // Campaign name.
  string campaign_name = 1;

  // Spends.
  // Amount spent on advertising.
  types.Currency spends = 2;

  // Frequency
  // Total impressions per reach.
  float frequency = 3;

  // Outbound clicks.
  // Number of outbound clicks on the ad.
  uint64 outbound_clicks = 4;

  // Unique outbound clicks.
  // Number of unique outbound clicks on the ad.
  uint64 unique_outbound_clicks = 5;

  // Impressions.
  // Number of times the ad was viewed.
  uint64 impressions = 6;

  // Overall clicks.
  // Total number of clicks on the ad.
  uint64 clicks_overall = 7;

  // Link clicks.
  // Number of clicks on links within the ad.
  uint64 link_clicks = 8;

  // Add to carts.
  // Number of times a product was added to the cart.
  uint64 add_to_carts = 9;

  // Add to cart value.
  // Total amount corresponding to the number of ATCs.
  types.Currency add_to_cart_value = 10;

  // Initiated checkouts.
  // Number of checkouts initiated.
  uint64 initiated_checkouts = 11;

  // Initiated checkout value.
  // Total amount corresponding to the number of ICs.
  types.Currency initiated_checkout_value = 12;

  // ATC to Purchase ratio.
  // Percentage of ATCs that resulted in a purchase.
  float add_to_cart_purchase_ratio = 13;

  // Purchases.
  // Number of completed purchases.
  uint64 purchases = 14;

  // Checkout abandonment rate.
  // Percentage of initiated checkouts abandoned.
  float checkout_abandonment_rate = 15;

  // Cost per purchase (CPP).
  // Average cost for each purchase.
  types.Currency cost_per_purchase = 16;

  // Cost per click (CPC).
  // Average cost for each click on the ad.
  types.Currency cost_per_click = 17;

  // Cost per link click.
  // Average cost for each click on a link within the ad.
  types.Currency cost_per_link_click = 18;

  // Click-through rate (CTR).
  // Percentage of impressions resulting in a click.
  float click_through_rate = 19;

  // Link click-through rate.
  // Percentage of link clicks relative to impressions.
  float link_click_through_rate = 20;

  // Cost per mille (CPM).
  // Cost of 1000 impressions.
  types.Currency cost_per_mille = 21;

  // Revenue.
  // Total revenue generated.
  types.Currency revenue = 22;

  // Average order value (AOV).
  // Average value of each order.
  types.Currency average_order_value = 23;

  // Return on ad spend (ROAS).
  // Revenue generated for every dollar spent on advertising.
  string return_on_ad_spend = 24;

  // Converison rate.
  // Percentage of clicks on the ad that resulted in a conversion.
  float conversion_rate = 25;

  // Outbound percent.
  // Percentage of outbound clicks on the ad.
  float outbound_percentage = 26;

  // Checkout to purchase ratio.
  float checkout_to_purchase_ratio = 27;

  // Number of landing page views.
  uint64 landing_page_views = 28;

  // Revenue per click.
  types.Currency revenue_per_click = 29;

  // Unique add to cart rate.
  // Percentage of unique visitors who added to cart.
  float unique_add_to_cart_rate = 30;

  // Cost per unique add to cart.
  types.Currency cost_per_unique_add_to_cart = 31;

  // Cost per unique checkout.
  types.Currency cost_per_unique_checkout = 32;

  // Cart drop off rate.
  // Percentage of visitors who abandoned the cart.
  float cart_drop_off_rate = 33;

  // List of zero or more sub rows for a record.
  repeated MetaCampaignsRecord subrows = 34;
}

// Next Id: 3
// Proto definition for Meta Campaigns Configuration.
message MetaCampaignsConfig {
    // Next Id: 34
    // Enumeration of possible columns in the Meta Campaigns table.
    enum Column {
      COLUMN_UNKNOWN = 0;
      COLUMN_CAMPAIGN_NAME = 1;
      COLUMN_SPENDS = 2;
      COLUMN_FREQUENCY = 3;
      COLUMN_OUTBOUND_CLICKS = 4;
      COLUMN_UNIQUE_OUTBOUND_CLICKS = 5;
      COLUMN_IMPRESSIONS = 6;
      COLUMN_CLICKS_OVERALL = 7;
      COLUMN_LINK_CLICKS = 8;
      COLUMN_ADD_TO_CARTS = 9;
      COLUMN_ADD_TO_CART_VALUE = 10;
      COLUMN_INITIATED_CHECKOUTS = 11;
      COLUMN_INITIATED_CHECKOUT_VALUE = 12;
      COLUMN_ADD_TO_CART_PURCHASE_RATIO = 13;
      COLUMN_PURCHASES = 14;
      COLUMN_CHECKOUT_ABANDONMENT_RATE = 15;
      COLUMN_COST_PER_PURCHASE = 16;
      COLUMN_COST_PER_CLICK = 17;
      COLUMN_COST_PER_LINK_CLICK = 18;
      COLUMN_CLICK_THROUGH_RATE = 19;
      COLUMN_LINK_CLICK_THROUGH_RATE = 20;
      COLUMN_COST_PER_MILLE = 21;
      COLUMN_REVENUE = 22;
      COLUMN_AVERAGE_ORDER_VALUE = 23;
      COLUMN_RETURN_ON_AD_SPEND = 24;
      COLUMN_CONVERSION_RATE = 25;
      COLUMN_OUTBOUND_PERCENTAGE = 26;
      COLUMN_CHECKOUT_TO_PURCHASE_RATIO = 27;
      COLUMN_LANDING_PAGE_VIEWS = 28;
      COLUMN_REVENUE_PER_CLICK = 29;
      COLUMN_UNIQUE_ADD_TO_CART_RATE = 30;
      COLUMN_COST_PER_UNIQUE_ADD_TO_CART = 31;
      COLUMN_COST_PER_UNIQUE_CHECKOUT = 32;
      COLUMN_CART_DROP_OFF_RATE = 33;
    }

    // Next Id: 7
    // Configuration for the table displayed in the Meta Campaigns.
    message TableConfig {
        // Specifies the order of columns in the table.
        repeated Column column_order = 1;

        // Specifies columns to be hidden in the table.
        repeated Column column_hidden = 2;

        // Specifies the default column used for sorting.
        Column default_sorted_column = 3;

        // Specifies the sorting direction.
        constants.ui.SortingDirection sorting_direction = 4;

        // Indicates whether to display the total row in the table.
        bool show_total = 5;

        // Indicates whether to display the subtotal row in the table.
        bool show_subtotal = 6;
    }

    // Specifies the type of rendering for the widget.
    constants.ui.RenderType render_type = 1;

    // Configuration for the table displayed in the widget.
    TableConfig table_config = 2;
}
